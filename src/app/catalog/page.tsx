'use client';

import { useState } from 'react';
import Navigation from '../components/Navigation';
import ProtectedRoute from '../components/ProtectedRoute';
import { useAuth } from '../context/AuthContext';
import styles from './catalog.module.css';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
type Review = {
  id: string;
  userId: string;
  userName: string;
  text: string;
  date: Date;
};

type Book = {
  id: string;
  title: string;
  author: string;
  year: number;
  genre: string;
  available: boolean;
  coverUrl: string;
  description: string;
  rating: number | null;
  totalRatings: number;
  averageRating: number;
  reviews: Review[];
};

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockBooks: Book[] = [
  {
    id: '1',
    title: '–í–æ–π–Ω–∞ –∏ –º–∏—Ä',
    author: '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π',
    year: 1869,
    genre: '–†–æ–º–∞–Ω',
    available: true,
    coverUrl: '/book-covers/war-and-peace.jpg',
    description: '–†–æ–º–∞–Ω-—ç–ø–æ–ø–µ—è, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–æ–±—ã—Ç–∏—è –≤–æ–π–Ω—ã 1812 –≥–æ–¥–∞.',
    rating: null,
    totalRatings: 15,
    averageRating: 8.5,
    reviews: [
      {
        id: '1',
        userId: '123',
        userName: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        text: '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—â–∞—Ö –≤ –∂–∏–∑–Ω–∏. –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞.',
        date: new Date('2024-03-01')
      }
    ]
  },
  {
    id: '2',
    title: '–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ',
    author: '–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π',
    year: 1866,
    genre: '–†–æ–º–∞–Ω',
    available: true,
    coverUrl: '/book-covers/crime-and-punishment.jpg',
    description: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –æ –º–æ–ª–æ–¥–æ–º —Å—Ç—É–¥–µ–Ω—Ç–µ.',
    rating: null,
    totalRatings: 12,
    averageRating: 9.0,
    reviews: []
  },
  // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–Ω–∏–≥ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
const ReviewSection = ({ book, onAddReview }: { book: Book; onAddReview: (text: string) => void }) => {
  const [reviewText, setReviewText] = useState('');
  const [showForm, setShowForm] = useState(false);
  const [wordCount, setWordCount] = useState(0);

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const text = e.target.value;
    const words = text.trim().split(/\s+/).length;
    if (text === '') {
      setWordCount(0);
    } else if (words <= 100) {
      setReviewText(text);
      setWordCount(words);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (reviewText.trim() && wordCount <= 100) {
      onAddReview(reviewText);
      setReviewText('');
      setShowForm(false);
      setWordCount(0);
    }
  };

  const formatDate = (date: Date) => {
    return new Date(date).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return (
    <div className={styles.reviewSection}>
      <h4>–û—Ç–∑—ã–≤—ã</h4>
      {book.reviews.map(review => (
        <div key={review.id} className={styles.review}>
          <div className={styles.reviewHeader}>
            <span className={styles.reviewAuthor}>{review.userName}</span>
            <span className={styles.reviewDate}>{formatDate(review.date)}</span>
          </div>
          <p className={styles.reviewText}>{review.text}</p>
        </div>
      ))}
      
      {!showForm ? (
        <button
          className={styles.addReviewButton}
          onClick={() => setShowForm(true)}
        >
          –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
        </button>
      ) : (
        <form onSubmit={handleSubmit} className={styles.reviewForm}>
          <textarea
            value={reviewText}
            onChange={handleTextChange}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–ª–æ–≤)"
            className={styles.reviewTextarea}
          />
          <div className={styles.reviewFormFooter}>
            <span className={styles.wordCount}>
              {wordCount}/100 —Å–ª–æ–≤
            </span>
            <div className={styles.reviewFormButtons}>
              <button
                type="button"
                onClick={() => setShowForm(false)}
                className={styles.cancelButton}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                disabled={!reviewText.trim() || wordCount > 100}
                className={styles.submitButton}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </button>
            </div>
          </div>
        </form>
      )}
    </div>
  );
};

export default function Catalog() {
  const { user } = useAuth();
  const [books, setBooks] = useState<Book[]>(mockBooks);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedGenre, setSelectedGenre] = useState('all');

  // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
  const genres = ['all', ...new Set(books.map(book => book.genre))];

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–Ω–∏–≥
  const filteredBooks = books.filter(book => {
    const matchesSearch = book.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         book.author.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesGenre = selectedGenre === 'all' || book.genre === selectedGenre;
    return matchesSearch && matchesGenre;
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleBooking = (bookId: string) => {
    setBooks(books.map(book => 
      book.id === bookId ? { ...book, available: false } : book
    ));
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    alert('–ö–Ω–∏–≥–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!');
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥–∏
  const handleRating = (bookId: string, rating: number) => {
    setBooks(books.map(book => {
      if (book.id === bookId) {
        const newTotalRatings = book.rating === null ? book.totalRatings + 1 : book.totalRatings;
        const oldRatingSum = book.averageRating * book.totalRatings;
        const newRatingSum = book.rating === null 
          ? oldRatingSum + rating
          : oldRatingSum - book.rating + rating;
        
        return {
          ...book,
          rating: rating,
          totalRatings: newTotalRatings,
          averageRating: Number((newRatingSum / newTotalRatings).toFixed(1))
        };
      }
      return book;
    }));
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  const handleAddReview = (bookId: string, text: string) => {
    setBooks(books.map(book => {
      if (book.id === bookId) {
        const newReview: Review = {
          id: Date.now().toString(),
          userId: user?.id || 'unknown',
          userName: `${user?.firstName} ${user?.lastName}`,
          text,
          date: new Date()
        };
        return {
          ...book,
          reviews: [...book.reviews, newReview]
        };
      }
      return book;
    }));
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤—ë–∑–¥–æ—á–µ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const RatingStars = ({ book, onRate }: { book: Book, onRate: (rating: number) => void }) => {
    return (
      <div className={styles.ratingContainer}>
        <div className={styles.stars}>
          {[...Array(10)].map((_, index) => (
            <button
              key={index}
              className={`${styles.starButton} ${book.rating && book.rating > index ? styles.active : ''}`}
              onClick={() => onRate(index + 1)}
            >
              ‚òÖ
            </button>
          ))}
        </div>
        <div className={styles.ratingInfo}>
          <span>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {book.averageRating}</span>
          <span>–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {book.totalRatings}</span>
        </div>
      </div>
    );
  };

  return (
    <ProtectedRoute>
      <Navigation />
      <div className={styles.container}>
        <header className={styles.header}>
          <div className={styles.filters}>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={styles.searchInput}
            />
            <select
              value={selectedGenre}
              onChange={(e) => setSelectedGenre(e.target.value)}
              className={styles.genreSelect}
            >
              {genres.map(genre => (
                <option key={genre} value={genre}>
                  {genre === 'all' ? '–í—Å–µ –∂–∞–Ω—Ä—ã' : genre}
                </option>
              ))}
            </select>
          </div>
        </header>

        <main className={styles.main}>
          <div className={styles.booksGrid}>
            {filteredBooks.map(book => (
              <div key={book.id} className={styles.bookCard}>
                <div className={styles.bookCover}>
                  {/* –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –∫–Ω–∏–≥–∏ */}
                  <div className={styles.coverPlaceholder}>üìö</div>
                </div>
                <div className={styles.bookInfo}>
                  <h3 className={styles.bookTitle}>{book.title}</h3>
                  <p className={styles.bookAuthor}>{book.author}</p>
                  <p className={styles.bookDetails}>
                    {book.genre} ‚Ä¢ {book.year} –≥.
                  </p>
                  <p className={styles.bookDescription}>{book.description}</p>
                  <RatingStars 
                    book={book} 
                    onRate={(rating) => handleRating(book.id, rating)} 
                  />
                  <ReviewSection
                    book={book}
                    onAddReview={(text) => handleAddReview(book.id, text)}
                  />
                  <button
                    className={`${styles.bookingButton} ${!book.available ? styles.booked : ''}`}
                    onClick={() => handleBooking(book.id)}
                    disabled={!book.available}
                  >
                    {book.available ? '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ'}
                  </button>
                </div>
              </div>
            ))}
          </div>
        </main>

        {filteredBooks.length === 0 && (
          <div className={styles.noResults}>
            <p>–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          </div>
        )}
      </div>
    </ProtectedRoute>
  );
} 